<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE mapper  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
			"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.comtalk.mapper.UserMapper">
	<sql id="findUser">
		select * from table_user 
	</sql>
	<!-- 分页sql基本代码 -->
	<sql id="pageSql">
		from table_user
		<if test="user != null">
			<where>
				<if test="user.userId != null &amp;&amp; user.userId != ''">
					userId like concat('%',#{user.userId},'%')
				</if>
			</where>
		</if>
		order by priority desc 
	</sql>
	<!-- 具体的分页语句 -->
	<select id="getUserListByPage" resultMap="userBaseResultMap">
		<trim prefix="select * " suffix="limit">
			<include refid="pageSql"/>
		</trim>
		#{pageModel.startRow},#{pageModel.pageSize}
	</select>
	<!-- 统计需要分页的行数 -->
	<select id="count" resultType="int">
		select count(*) <include refid="pageSql"/>
	</select>
	
	<!-- 查询所有用户ID数据 -->
	<select id="getAllUserId" resultMap="userBaseResultMap">
		select userId from table_user
	</select>
	
	<!-- 根据用户名和密码查询用户 -->
	<select id="getUserByUserIdAndByPassword" resultMap="userBaseResultMap">
			<include refid="findUser"/>
			<where>
				userName = #{userName} and password = #{password}
			</where>
	</select>
	<!-- 根据用户编号查询用户数据 -->
	<select id="getUserById" resultMap="userBaseResultMap">
			<include refid="findUser"/>
			<where>
				userId = #{userId}
			</where>
	</select>
	
	<!-- 判断用户名是否重复 -->
	<select id="getUserByUserId" resultType="int">
			select count(*) from table_user where userId = #{userId}
	</select>
	
	<!-- 查询管理员 -->
	<select id="getAdmin" resultMap="userBaseResultMap">
			<include refid="findUser"/>
			<where>
				userId = #{userId} and passwd = #{passwd} and level = #{level}
			</where>
	</select>
	
	<insert id="save">
		insert into table_user(
			userId,userName,password,authenticateCode,
			priority,type,loginTime,loginStatus) 
		values
		(#{userId},#{userName},#{password},#{authenticateCode},#{priority},#{type},#{loginTime},#{loginStatus})
	</insert>

	
	<!-- 用户更新 -->
	<update id="updateUser">
		update table_user set userId=#{user.userId},userName=#{user.userName},password=#{user.password},authenticateCode=#{user.authenticateCode},type=#{user.type} where userId=#{tempModel.temp}
	</update>
	
	<!-- 用户帐号删除操作-->
	<delete id="deleteUser">
		delete from table_user where userId=#{userId}
	</delete>
	
	<!-- 用户登录状态更新 -->
	<update id="updateLogin">
		update table_user set loginTime=SYSDATE(),loginStatus=1 where userId=#{userId}
	</update>
	
	<!-- 用户注销 -->
	<update id="updateLogout">
		update table_user set loginStatus=0 where userId=#{userId}
	</update>
	
	<!-- 定义ResultMap -->
	<resultMap id="userBaseResultMap" type="User" autoMapping="true">
		<!-- 定义列和java对象属性的对应关系 -->
		<result column="userId" property="userId"/>
		<result column="userName" property="userName"/>
		<result column="password" property="password"/>
		<result column="authenticateCode" property="authenticateCode"/>
		<result column="priority" property="priority"/>
		<result column="type" property="type"/>
		<result column="loginTime" property="loginTime"/>
		<result column="loginStatus" property="loginStatus"/>
	</resultMap>
</mapper>